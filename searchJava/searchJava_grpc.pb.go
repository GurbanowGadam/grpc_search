// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package searchJava

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchJavaClient is the client API for SearchJava service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchJavaClient interface {
	SearchPeople(ctx context.Context, in *SearchText, opts ...grpc.CallOption) (*SearchResult, error)
}

type searchJavaClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchJavaClient(cc grpc.ClientConnInterface) SearchJavaClient {
	return &searchJavaClient{cc}
}

func (c *searchJavaClient) SearchPeople(ctx context.Context, in *SearchText, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, "/searchJava.SearchJava/SearchPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchJavaServer is the server API for SearchJava service.
// All implementations must embed UnimplementedSearchJavaServer
// for forward compatibility
type SearchJavaServer interface {
	SearchPeople(context.Context, *SearchText) (*SearchResult, error)
	mustEmbedUnimplementedSearchJavaServer()
}

// UnimplementedSearchJavaServer must be embedded to have forward compatible implementations.
type UnimplementedSearchJavaServer struct {
}

func (UnimplementedSearchJavaServer) SearchPeople(context.Context, *SearchText) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPeople not implemented")
}
func (UnimplementedSearchJavaServer) mustEmbedUnimplementedSearchJavaServer() {}

// UnsafeSearchJavaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchJavaServer will
// result in compilation errors.
type UnsafeSearchJavaServer interface {
	mustEmbedUnimplementedSearchJavaServer()
}

func RegisterSearchJavaServer(s grpc.ServiceRegistrar, srv SearchJavaServer) {
	s.RegisterService(&SearchJava_ServiceDesc, srv)
}

func _SearchJava_SearchPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchJavaServer).SearchPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchJava.SearchJava/SearchPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchJavaServer).SearchPeople(ctx, req.(*SearchText))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchJava_ServiceDesc is the grpc.ServiceDesc for SearchJava service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchJava_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searchJava.SearchJava",
	HandlerType: (*SearchJavaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPeople",
			Handler:    _SearchJava_SearchPeople_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "searchJava/searchJava.proto",
}
